exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

function common_main() {
  payload=$(cat)

  board_manager_url=$(jq -r '.source.board_manager_url // ""' <<< $payload)
  package=$(jq -r '.source.package // ""' <<< $payload)
  platform=$(jq -r '.source.platform // ""' <<< $payload)

  version=$(jq -r '.version.version // ""' <<< $payload)

  test -n "$package" || invalid package
  test -n "$platform" || invalid platform
}

function invalid() {
    panic "invalid payload (missing $1)"
}

function panic() {
  echo "${@}" 1>&2
  exit 1
}

function download() {
  if [ -n "$board_manager_url" ]
  then
    curl -fsL "${board_manager_url}"
  else
    curl -fsL https://downloads.arduino.cc/packages/package_index.tar.bz2 \
    | tar jxO package_index.json
  fi
}

function versions() {
  local arg
  arg='.packages[] | select(.name == "'$package'") | .platforms[] | select(.architecture == "'$platform'") | .version'

  jq -r "${arg}" \
  | sort -V
}

function metadata() {
  local arg raw
  arg='.packages[] | select(.name == "'$package'") | .platforms[] | select(.architecture == "'$platform'") | select(.version == "'$1'")'
  raw=$(jq -r "${arg}")

  cat <<EOT
{
  "name": "board_manager_url",
  "value": "$board_manager_url"
},
{
  "name": "package",
  "value": "$package"
},
{
  "name": "platform",
  "value": "$platform"
},
{
  "name": "url",
  "value": "$(jq -r .url <<< $raw)"
},
{
  "name": "checksum",
  "value": "$(jq -r .checksum <<< $raw)"
},
{
  "name": "size",
  "value": "$(jq -r .size <<< $raw)"
}
EOT
}

common_main "${@}"

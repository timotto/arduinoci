meta:
  git_resource: &git_resource
    type: git
    icon: github
    webhook_token: ((webhook_token))
    check_every: 24h
  git_source: &git_source
    uri: ((source_uri))
    branch: main
    private_key: ((github.private_key))

  semver_resource: &semver_resource
    type: semver
    icon: numbers
  semver_source: &semver_source
    driver: git
    uri: ((source_uri))
    branch: version
    private_key: ((github.private_key))

  github_release_resource: &github_release_resource
    type: github-release
    check_every: 24h
    icon: bucket
  github_release_source: &github_release_source
    access_token: ((github.access_token))
  
  arduinocli_package_resource: &arduinocli_package_resource
    type: arduinocli-package
    icon: bucket
  
  docker_resource: &docker_resource
    type: docker-image
    icon: bucket
  docker_source: &docker_source
    username: ((dockerhub.username))
    password: ((dockerhub.password))

  remote_docker_resource: &remote_docker_resource
    type: remote-docker-image
    icon: bucket
  remote_docker_source: &remote_docker_source
    <<: *docker_source
    dockerd: ((dockerd))

  alpine_task: &alpine_task
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: alpine
        tag: latest

  get_package: &get_package
    get: package
    trigger: true
  get_version: &get_version
    get: image-version
    params: {bump: patch}
  get_package_image: &get_package_image
    in_parallel:
    - get: package-image-source
      resource: arduinocli-package-image-source
      trigger: true
    - get: arduino-cli-image
      passed: [arduino-cli-image]
      trigger: true
      params:
        save: true
    - get: arduino-cli-release
      passed: [arduino-cli-image]
  tag_package_task: &tag_package_task
    task: tag
    config:
      <<: *alpine_task
      inputs:
      - name: package
      - name: image-version
      - name: arduino-cli-release
      outputs:
      - name: docker
      run:
        path: sh
        args:
        - -ec
        - |
          version=`cat package/version`
          board_manager_url=`cat package/board_manager_url`
          package=`cat package/package`
          platform=`cat package/platform`
          image_version=`cat image-version/version`
          arduino_cli_version=`cat arduino-cli-release/version`
          
          core_args=""
          if [ -n "$board_manager_url" ]
          then
            core_args="--additional-urls $board_manager_url"
          fi

          cat > docker/build-args.json <<EOT
          {
            "core_args": "$core_args",
            "package": "$package",
            "platform": "$platform",
            "version": "$version"
          }
          EOT
          echo "v${version} v${version}-${arduino_cli_version} v${version}-${arduino_cli_version}-${image_version}" > docker/tags

          cat docker/build-args.json
          cat docker/tags
  put_package_image: &put_package_image
    put: arduinocli-package-image
    params:
      build: package-image-source/docker/arduinocli-package
      build_args_file: docker/build-args.json
      tag_as_latest: false
      additional_tags: docker/tags
      load_base: arduino-cli-image
    get_params:
      skip_download: true
  put_version: &put_version
    put: image-version
    params: {bump: patch}

# workaround for check error when using access_token
# error running command: illegal base64 data at input byte 2
resource_types:
- name: github-release
  type: registry-image
  source:
    repository: concourse/github-release-resource
    tag: "1.6.4"

- name: arduinocli-package
  type: registry-image
  source:
    repository: arduinoci/concourse-arduinocli-resource
    tag: "v0.0.6"

- name: remote-docker-image
  type: registry-image
  privileged: true
  source:
    repository: timotto/docker-image-resource
    tag: latest

resources:
- name: arduino-cli-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/ci-arduino-cli

- name: arduino-cli-image-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: arduino-cli-image

- name: arduino-cli-image-source
  <<: *git_resource
  source:
    <<: *git_source
    paths: [docker/arduino-cli]

- name: arduino-cli-release
  <<: *github_release_resource
  source:
    <<: *github_release_source
    owner: arduino
    repository: arduino-cli


- name: arduinocli-package-image-source
  <<: *git_resource
  source:
    <<: *git_source
    paths: [docker/arduinocli-package]


- name: arduino-esp32-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/ci-arduino-esp32

- name: arduino-esp32-image-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: arduino-esp32-image

- name: arduino-esp32-release
  <<: *arduinocli_package_resource
  source:
    board_manager_url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
    package: esp32
    platform: esp32


- name: arduino-esp8266-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/ci-arduino-esp8266

- name: arduino-esp8266-image-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: arduino-esp8266-image

- name: arduino-esp8266-release
  <<: *arduinocli_package_resource
  source:
    board_manager_url: https://arduino.esp8266.com/stable/package_esp8266com_index.json
    package: esp8266
    platform: esp8266


- name: arduino-rp2040-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/ci-arduino-rp2040

- name: arduino-rp2040-image-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: arduino-rp2040-image

- name: arduino-rp2040-release
  <<: *arduinocli_package_resource
  source:
    package: arduino
    platform: mbed_rp2040


- name: arduino-pico-rp2040-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/ci-arduino-pico-rp2040

- name: arduino-pico-rp2040-image-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: arduino-rp2040-image

- name: arduino-pico-rp2040-release
  <<: *arduinocli_package_resource
  source:
    board_manager_url: https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json
    package: rp2040
    platform: rp2040


- name: pipeline-source
  <<: *git_resource
  source:
    <<: *git_source
    paths: [pipeline.yml]


- name: concourse-arduinocli-resource-source
  <<: *git_resource
  source:
    <<: *git_source
    paths: [concourse/concourse-arduinocli-resource]

- name: concourse-arduinocli-resource-image
  <<: *docker_resource
  source:
    <<: *docker_source
    repository: ((docker_prefix))/concourse-arduinocli-resource

- name: concourse-arduinocli-resource-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: concourse-arduinocli-resource


- name: concourse-rpi-worker-source
  <<: *git_resource
  source:
    <<: *git_source
    paths: [concourse/rpi-concourse-worker]

- name: concourse-rpi-worker-image
  <<: *remote_docker_resource
  source:
    <<: *remote_docker_source
    repository: ((docker_prefix))/concourse-rpi-worker

- name: concourse-esp-rpi-worker-image
  <<: *remote_docker_resource
  source:
    <<: *remote_docker_source
    repository: ((docker_prefix))/concourse-esp-rpi-worker

- name: concourse-rpi-worker-version
  <<: *semver_resource
  source:
    <<: *semver_source
    file: concourse-rpi-worker

- name: concourse-release
  <<: *github_release_resource
  source:
    <<: *github_release_source
    owner: concourse
    repository: concourse


jobs:
- name: arduino-cli-image
  serial: true
  plan:
  - in_parallel:
    - get: arduino-cli-release
      trigger: true
      params:
        globs: [arduino-cli_*_Linux_64bit.tar.gz]
    - get: arduino-cli-image-source
      trigger: true
    - get: arduino-cli-image-version
      params: {bump: patch}
  - task: tag
    config:
      <<: *alpine_task
      inputs:
      - name: arduino-cli-release
      - name: arduino-cli-image-source
      - name: arduino-cli-image-version
      outputs:
      - name: docker
      run:
        path: sh
        args:
        - -ec
        - |
          arduino_cli_version=`cat arduino-cli-release/version`
          image_version=`cat arduino-cli-image-version/version`

          cp -rv arduino-cli-image-source/docker/arduino-cli/Dockerfile docker/
          cp -rv arduino-cli-release docker/

          echo '{"cli_version": "'${arduino_cli_version}'"}' > docker/build-args.json
          echo "v${arduino_cli_version} v${arduino_cli_version}-${image_version}" > docker/tags

          cat docker/build-args.json
          cat docker/tags
  - put: arduino-cli-image
    params:
      build: docker
      build_args_file: docker/build-args.json
      tag_as_latest: true
      additional_tags: docker/tags
  - put: arduino-cli-image-version
    params: {bump: patch}

- name: arduino-esp32-image
  serial: true
  plan:
  - in_parallel:
    - resource: arduino-esp32-release
      <<: *get_package
    - resource: arduino-esp32-image-version
      <<: *get_version
  - <<: *get_package_image
  - <<: *tag_package_task
  - resource: arduino-esp32-image
    <<: *put_package_image
  - resource: arduino-esp32-image-version
    <<: *put_version


- name: arduino-esp8266-image
  serial: true
  plan:
  - in_parallel:
    - resource: arduino-esp8266-release
      <<: *get_package
    - resource: arduino-esp8266-image-version
      <<: *get_version
  - <<: *get_package_image
  - <<: *tag_package_task
  - resource: arduino-esp8266-image
    <<: *put_package_image
  - resource: arduino-esp8266-image-version
    <<: *put_version


- name: arduino-rp2040-image
  serial: true
  plan:
  - in_parallel:
    - resource: arduino-rp2040-release
      <<: *get_package
    - resource: arduino-rp2040-image-version
      <<: *get_version
  - <<: *get_package_image
  - <<: *tag_package_task
  - resource: arduino-rp2040-image
    <<: *put_package_image
  - resource: arduino-rp2040-image-version
    <<: *put_version


- name: arduino-pico-rp2040-image
  serial: true
  plan:
  - in_parallel:
    - resource: arduino-pico-rp2040-release
      <<: *get_package
    - resource: arduino-pico-rp2040-image-version
      <<: *get_version
  - <<: *get_package_image
  - <<: *tag_package_task
  - resource: arduino-pico-rp2040-image
    <<: *put_package_image
  - resource: arduino-pico-rp2040-image-version
    <<: *put_version


- name: pipeline
  serial: true
  plan:
  - get: pipeline-source
    trigger: true
  - set_pipeline: ((pipeline_name))
    file: pipeline-source/pipeline.yml
    vars:
      source_uri: ((source_uri))
      pipeline_name: ((pipeline_name))
      docker_prefix: ((docker_prefix))

- name: concourse-arduinocli-resource
  serial: true
  plan:
  - in_parallel:
    - get: concourse-arduinocli-resource-source
      trigger: true
    - get: concourse-arduinocli-resource-version
      params: {bump: patch}

  - put: concourse-arduinocli-resource-image
    params:
      build: concourse-arduinocli-resource-source/concourse/concourse-arduinocli-resource
      tag_as_latest: true
      tag_file: concourse-arduinocli-resource-version/version
      tag_prefix: v
    get_params:
      skip_download: true

  - put: concourse-arduinocli-resource-version
    params: {bump: patch}

- name: concourse-rpi-worker
  serial: true
  plan:
  - in_parallel:
    - get: concourse-rpi-worker-source
      trigger: true
    - get: concourse-rpi-worker-version
      params: {bump: patch}
    - get: concourse-release
      trigger: true
      params:
        globs: [none]
        include_source_tarball: true
  - task: build-concourse
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: golang
          tag: alpine
      inputs:
      - name: concourse-rpi-worker-source
      - name: concourse-rpi-worker-version
      - name: concourse-release
      outputs:
      - name: docker
      caches:
      - path: /go
      params:
        GOOS: linux
        GOARCH: arm
        GOARM: "7"
        CGO_ENABLED: "0"
      run:
        path: sh
        args:
        - -ec
        - |
          target=$PWD/docker
          concourse_version=$(cat concourse-release/version)
          image_version=$(cat concourse-rpi-worker-version/version)

          echo "${concourse_version}" \
          > docker/tag

          echo "${concourse_version}-${image_version}" \
          > docker/tags
          
          cp -v \
            concourse-rpi-worker-source/concourse/rpi-concourse-worker/Dockerfile \
            $target/Dockerfile
          
          cd concourse-release
          tar zxf source.tar.gz
          cd concourse-concourse-*/
          go build \
            -a -tags netgo \
            -ldflags '-w' \
            -o $target/concourse-linux-armv7 \
            ./cmd/concourse
  - put: concourse-rpi-worker-image
    params:
      build: docker
      tag_as_latest: false
      tag_file: docker/tag
      additional_tags: docker/tags
    get_params:
      skip_download: true
  - put: concourse-esp-rpi-worker-image
    params:
      build: docker
      tag_as_latest: false
      tag_file: docker/tag
      additional_tags: docker/tags
      build_args:
        extra_packages: "go python3 py3-pip py3-cryptography python3-dev gcc libc-dev libffi-dev openssl-dev"
        extra_run: "pip install esptool --break-system-packages"
    get_params:
      skip_download: true
  - put: concourse-rpi-worker-version
    params: {bump: patch}

groups:
- name: docker-images
  jobs:
  - arduino-cli-image
  - arduino-esp32-image
  - arduino-esp8266-image
  - arduino-rp2040-image
  - arduino-pico-rp2040-image

- name: concourse
  jobs:
  - concourse-rpi-worker
  - concourse-arduinocli-resource

- name: ci
  jobs:
  - pipeline
